g(x) = x^2 - x - 6

println("complex = ", 1 + i)

println("g(3) = ", g(3))
println("g(-2) = ", g(-2))
println("g(7) = ", g(7))

alg newton_iter(r, f, fp)
{
	return r - f(r)/fp(r)
}

# TODO: error handling for "if ()"
# TODO: break and continue in while
# 
# TODO: Yp caching is not working figure out why
# TODO: Also cannot put commas in comments
# yp = fp(r)
# TODO: need to show error when (condition) after else
# Make sure that arguments are immutable unless allowed to ref
# TODO: try adding static variables for algorithms

alg newton(r, f)
{
        # Should be static
	eps = 1e-20

	# Get the derivative
	fp = f.derivative()

	less = null
	more = null

	y = f(r)
	if (y > 0)
		more = r
	else
		less = r
	
	x = r

	println("BOUNDARY LOOP:")
	while ((more == null) || (less == null)) {
		x = newton_iter(x, f, fp)

		println("f(x) = ", f(7))

		y = f(x)
		println("y = ", y)
		println("x = ", x)
		println("f(x') = ", f(x))

                # Check putting after elif
                if (abs(y) < eps)
                       return x

		if ((y > 0) && (more == null))
			more = x
		elif ((y < 0) && (less == null))
			less = x
	}

        # Refine for a maximum number of steps
        i = 0
	while (i++ < 100) {
                println("========================")
		x = newton_iter(x, f, fp)
                
                println("PRE-FINAL X = ", x)

                # For some reason /2 does not work
		if ((x < less) || (x > more))
			x = 0.5 * (more + less)

                println("FINAL X = ", x)

		# Check for exit condition (interval or value)
		y = f(x)
		if ((abs(y) < eps) || (abs(more - less) < eps))
			break

                # Adjust boundaries
                if (y < 0) {
                        # Make sure we are actually closing the interval
                        if (abs(more - less) > abs(more - x))
                                less = x
                } else {
                        if (abs(more - less) > abs(x - less))
                                more = x
                }

                println("x = ", x)
                println("y = ", y)
                println("[more, less] = [", more, ", ", less, "]")
                println("\tlength = ", abs(more - less))
                println("x' = ", newton_iter(x, f, fp))
	}

        return x
}

println("root = ", newton(1, g))
